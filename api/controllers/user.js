const { nanoid } = require('nanoid');
const bcrypt = require('bcrypt');
const pool = require('../../config/db');

module.exports = () => {
  const controller = {};

  controller.register = (req, res) => {
    const id = nanoid(10);
    const username = req.body.username;
    const email = req.body.email;
    const salt = bcrypt.genSaltSync(10);
    const hash = bcrypt.hashSync(req.body.password, salt);

    if ((username.length <= 20) && (email.length <= 50)) {
      pool.getConnection((err, connection) => {
        connection.query(`SELECT * FROM user WHERE username = ?`, [
          username,
        ], function(error, results) {
          if(results.length > 0) {
            res.status(409).json({ message: "The given username is already taken" })
          } else {
            connection.query(`SELECT * FROM user WHERE email = ?`, [
              email,
            ], function(error, results) {
              if(results.length > 0) {
                res.status(409).json({ message: "The given email is already being used" })
              } else {
                connection.query(`INSERT INTO user (id, username, email, passwd) VALUES (?, ?, ?, ?)`, [
                  id,
                  username,
                  email,
                  hash
                ], function (error, rows) {
                    connection.release();
                    if (error) throw error;
                    res.status(201).json({ message: "Success" });
                });
              }
            })
          }
        })        
      });
    } else {
      res.status(400).json({ message: "Email and/or username exceeds character limit" });
    }
  }

  return controller;
}